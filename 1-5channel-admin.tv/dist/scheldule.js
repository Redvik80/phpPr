!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"d",(function(){return i})),n.d(e,"c",(function(){return l})),n.d(e,"e",(function(){return o})),n.d(e,"b",(function(){return s}));var r="http://1-5channel.tv",i="/files/images/";function l(t){return t.firstElementChild.innerHTML}function o(t,e){return t.firstElementChild.innerHTML=e}function s(t){new Quill(t,{theme:"snow",modules:{toolbar:[[{size:["small",!1,"large","huge"]}],["bold","italic","underline","strike"],[{script:"sub"},{script:"super"},{color:[]},"clean"]]}})}},,,function(t,e,n){t.exports=n.p+"scheldule.css"},,,function(t,e,n){"use strict";n.r(e);n(3);var r=function(){function t(t,e,n,r){var i=this;this.valuesList=e,this.currentValue=n,this.findField=r,this.html={},this.html.root=t,this.html.root.classList.add("input-find"),this.html.root.innerHTML="",this.html.input=document.createElement("input"),this.html.input.value=this.currentValue?this.currentValue[this.findField]:"",this.html.valuesContainer=document.createElement("div"),this.html.valuesContainer.classList.add("input-find__values-container"),this.html.input.addEventListener("input",this.displayFindRezults.bind(this));var l=function(t){i.html.root.contains(t.target)||(document.removeEventListener("mousedown",l),i.html.valuesContainer.classList.remove("_visible"),i.html.input.value=i.currentValue?i.currentValue[i.findField]:"")};this.html.input.addEventListener("focus",(function(){document.addEventListener("mousedown",l),i.displayFindRezults()})),this.html.valuesContainer.addEventListener("click",this.onSelectValue.bind(this,l)),this.html.root.appendChild(this.html.input),this.html.root.appendChild(this.html.valuesContainer)}return t.prototype.find=function(){var t=this,e=this.html.input.value.split(/[\s.,-]+/i).filter((function(t,e,n){return!(t.length<2||n.lastIndexOf(t)>e)}));if(0===e.length)return[];var n=this.valuesList.map((function(n,r){for(var i={value:n,wordsQuantity:0,arrIdx:r},l=0,o=e;l<o.length;l++){var s=o[l];new RegExp("^"+s+"[\\s.,-]+|[\\s.,-]+"+s+"[\\s.,-]+|[\\s.,-]+"+s+"$","i").test(n[t.findField])&&i.wordsQuantity++}return i})).filter((function(t){return t.wordsQuantity>0}));return n.sort((function(t,e){return e.wordsQuantity-t.wordsQuantity})),n},t.prototype.displayFindRezults=function(){this.html.valuesContainer.innerHTML="";for(var t=0,e=this.find();t<e.length;t++){var n=e[t],r=document.createElement("div");r.dataset.valueArrIdx=n.arrIdx+"",r.innerText=n.value[this.findField],r.classList.add("input-find__values-item"),this.html.valuesContainer.appendChild(r)}this.html.valuesContainer.classList.add("_visible"),this.html.valuesContainer.scrollTop=0},t.prototype.onSelectValue=function(t){document.removeEventListener("mousedown",t);var e=event.target;e.classList.contains("input-find__values-item")&&(this.currentValue=this.valuesList[+e.dataset.valueArrIdx],this.html.input.value=this.currentValue[this.findField],this.html.valuesContainer.classList.remove("_visible"),this.html.root.dispatchEvent(new CustomEvent("inputFindChange",{detail:{value:this.currentValue}})))},t}(),i=n(0);new(function(){function t(){this.programs=[],this.schelduleItems=[],this.rows=[];var t=document.getElementsByClassName("scheldule-crud-container")[0];this.html={root:t,addBtn:t.querySelector(".table__btn._add"),saveBtn:t.querySelector(".table__btn._save"),cancelBtn:t.querySelector(".table__btn._cancel"),dateInput:t.getElementsByClassName("date-input")[0],rowsContainer:t.getElementsByClassName("table__body")[0]},this.html.addBtn.addEventListener("click",this.onAddBtnClick.bind(this)),this.html.cancelBtn.addEventListener("click",this.onCancelBtnClick.bind(this)),this.html.saveBtn.addEventListener("click",this.onSaveBtnClick.bind(this)),this.html.dateInput.value=(new Date).getFullYear()+"-"+(new Date).getMonth()+"-"+(new Date).getDate(),this.html.dateInput.addEventListener("change",this.onDateChange.bind(this)),this.onDateChange()}return t.prototype.onDateChange=function(){var t=this;if(this.html.dateInput.value){var e=fetch(i.a+"/api/program/getAll.php").then((function(t){return t.json()})),n=fetch(i.a+"/api/scheldule/getAll.php?date="+ +new Date(this.html.dateInput.value)).then((function(t){return t.json()}));Promise.all([e,n]).then((function(e){t.programs=e[0],t.schelduleItems=e[1],t.html.rowsContainer.innerHTML="";for(var n=function(e){e.program=t.programs.find((function(t){return t.id===e.program_id})),t.addRow(e)},r=0,i=t.schelduleItems;r<i.length;r++){n(i[r])}t.getOrdersTime()}))}},t.prototype.addRow=function(t){this.html.rowsContainer.insertAdjacentHTML("beforeend",'<div class="table__row" data-scheldule-id="'+t.id+'">\n                <div class="table__content-cells-container">\n                    <div class="table__cell _time">\n                        <div class="table__cell-value"></div>\n                    </div>\n                    <div class="table__cell _program-name">\n                        <div class="table__cell-change-elem"></div>\n                    </div>\n                    <div class="table__cell _program-duration">\n                        <div class="table__cell-value">'+this.convertDuration(t.program.duration).str+'</div>\n                    </div>\n                </div>\n                <div class="table__cell _btns">\n                    <button class="pi pi-arrow-up table__btn _order-minus"></button>\n                    <button class="pi pi-arrow-down table__btn _order-plus"></button>\n                    <button class="pi pi-trash table__btn _delete"></button>\n                </div>\n            </div>');var e=this.html.rowsContainer.lastElementChild,n={html:{root:e,timeValue:e.querySelector(".table__cell._time .table__cell-value"),programNameChangeElem:e.querySelector(".table__cell._program-name .table__cell-change-elem"),programDurationValue:e.querySelector(".table__cell._program-duration .table__cell-value"),btnOrderPlus:e.querySelector(".table__btn._order-plus"),btnOrderMinus:e.querySelector(".table__btn._order-minus"),btnDelete:e.querySelector(".table__btn._delete")},value:t};this.rows.push(n),new r(n.html.programNameChangeElem,this.programs,t.program,"name"),n.html.programNameChangeElem.addEventListener("inputFindChange",this.onSelectProgram.bind(this,n)),n.html.btnDelete.addEventListener("click",this.onDeleteBtnClick.bind(this,n)),n.html.btnOrderPlus.addEventListener("click",this.onOrderPlusBtnClick.bind(this,n)),n.html.btnOrderMinus.addEventListener("click",this.onOrderMinusBtnClick.bind(this,n))},t.prototype.onSaveBtnClick=function(){this.html.root.classList.remove("_changed")},t.prototype.onCancelBtnClick=function(){this.html.root.classList.remove("_changed")},t.prototype.onAddBtnClick=function(){},t.prototype.onSelectProgram=function(t){this.html.root.classList.add("_changed"),t.value.program=event.detail.value,t.value.program_id=t.value.program.id,t.html.programDurationValue.innerText=this.convertDuration(t.value.program.duration).str},t.prototype.onOrderPlusBtnClick=function(t){var e=this.rows.findIndex((function(e){return e.value.id===t.value.id}));if(e<this.rows.length-2?(t.html.root.parentElement.insertBefore(t.html.root,this.rows[e+2].html.root),console.log(this.rows[e+2].html.root)):e<this.rows.length-1&&t.html.root.parentElement.appendChild(t.html.root),e<this.rows.length-1){this.html.root.classList.add("_changed");var n=this.rows[e+1];this.rows[e+1]=t,this.rows[e]=n,t.value.order++,n.value.order--,this.rowTimePlus(t,n.value.program.duration),this.rowTimeMinus(n,t.value.program.duration)}},t.prototype.onOrderMinusBtnClick=function(t){var e=this.rows.findIndex((function(e){return e.value.id===t.value.id}));if(e>0){this.html.root.classList.add("_changed");var n=this.rows[e-1];t.html.root.parentElement.insertBefore(t.html.root,n.html.root),this.rows[e-1]=t,this.rows[e]=n,t.value.order--,n.value.order++,this.rowTimeMinus(t,n.value.program.duration),this.rowTimePlus(n,t.value.program.duration)}},t.prototype.onDeleteBtnClick=function(t){},t.prototype.convertDuration=function(t){var e=Math.floor(t/36e5),n=Math.floor((t-36e5*e)/6e4);return{hours:e,mins:n,str:(e>0?e+"ч. ":"")+(n>0||0===e?n+"мин.":"")}},t.prototype.getOrdersTime=function(){for(var t={hours:0,minutes:0},e=0,n=this.rows;e<n.length;e++){var r=n[e];for(r.html.timeValue.innerText=(t.hours<10?"0":"")+t.hours+":"+(t.minutes<10?"0":"")+t.minutes,t.minutes+=Math.round(r.value.program.duration/6e4);t.minutes>59;)t.minutes-=60,t.hours++}},t.prototype.rowTimePlus=function(t,e){var n=t.html.timeValue.innerText.split(":"),r={hours:+n[0],minutes:+n[1]};for(r.minutes+=Math.round(e/6e4);r.minutes>59;)r.minutes-=60,r.hours++;t.html.timeValue.innerText=(r.hours<10?"0":"")+r.hours+":"+(r.minutes<10?"0":"")+r.minutes},t.prototype.rowTimeMinus=function(t,e){var n=t.html.timeValue.innerText.split(":"),r={hours:+n[0],minutes:+n[1]};for(r.minutes-=Math.round(e/6e4);r.minutes<0;)r.minutes+=60,r.hours--;t.html.timeValue.innerText=(r.hours<10?"0":"")+r.hours+":"+(r.minutes<10?"0":"")+r.minutes},t}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc2VydmljZXMvY29tbW9uLnRzIiwid2VicGFjazovLy8uL3BhZ2VzL3NjaGVsZHVsZS9zY2hlbGR1bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2lucHV0LWZpbmQvaW5wdXQtZmluZC50cyIsIndlYnBhY2s6Ly8vLi9wYWdlcy9zY2hlbGR1bGUvc2NoZWxkdWxlLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYmFja2VuZEFkZHJlc3MiLCJpbWFnZXNVcmxSb290IiwiZ2V0UXVpbGxFZGl0b3JWYWx1ZSIsInF1aWxsRWRpdG9yRWxlbSIsImZpcnN0RWxlbWVudENoaWxkIiwiaW5uZXJIVE1MIiwic2V0UXVpbGxFZGl0b3JWYWx1ZSIsImNyZWF0ZVN0YW5kYXJ0UXVpbGxFZGl0b3IiLCJlbGVtIiwiUXVpbGwiLCJ0aGVtZSIsInRvb2xiYXIiLCJlbGVtZW50IiwidmFsdWVzTGlzdCIsImN1cnJlbnRWYWx1ZSIsImZpbmRGaWVsZCIsImh0bWwiLCJ0aGlzIiwicm9vdCIsImNsYXNzTGlzdCIsImFkZCIsImlucHV0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidmFsdWVzQ29udGFpbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BsYXlGaW5kUmV6dWx0cyIsInZpc2libGVMaXN0ZW5uZXIiLCJldmVudCIsImNvbnRhaW5zIiwidGFyZ2V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZSIsIm9uU2VsZWN0VmFsdWUiLCJhcHBlbmRDaGlsZCIsImZpbmQiLCJ3b3JkcyIsInNwbGl0IiwiZmlsdGVyIiwiaXRlbSIsImlkeCIsImFyciIsImxlbmd0aCIsImxhc3RJbmRleE9mIiwicmV6dWx0IiwibWFwIiwibmV3SXRlbSIsIndvcmRzUXVhbnRpdHkiLCJhcnJJZHgiLCJ3b3JkIiwiUmVnRXhwIiwidGVzdCIsInNvcnQiLCJpdGVtMSIsIml0ZW0yIiwiaHRtbEl0ZW0iLCJkYXRhc2V0IiwidmFsdWVBcnJJZHgiLCJpbm5lclRleHQiLCJzY3JvbGxUb3AiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJwcm9ncmFtcyIsInNjaGVsZHVsZUl0ZW1zIiwicm93cyIsImNvbXBSb290IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImFkZEJ0biIsInF1ZXJ5U2VsZWN0b3IiLCJzYXZlQnRuIiwiY2FuY2VsQnRuIiwiZGF0ZUlucHV0Iiwicm93c0NvbnRhaW5lciIsIm9uQWRkQnRuQ2xpY2siLCJvbkNhbmNlbEJ0bkNsaWNrIiwib25TYXZlQnRuQ2xpY2siLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJvbkRhdGVDaGFuZ2UiLCJwcjEiLCJmZXRjaCIsInRoZW4iLCJyZXNwIiwianNvbiIsInByMiIsIlByb21pc2UiLCJhbGwiLCJkYXRhIiwicHJvZ3JhbSIsImlkIiwicHJvZ3JhbV9pZCIsImFkZFJvdyIsImdldE9yZGVyc1RpbWUiLCJzY2hlbGR1bGVJdGVtIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiY29udmVydER1cmF0aW9uIiwiZHVyYXRpb24iLCJzdHIiLCJuZXdSb3dIdG1sIiwibGFzdEVsZW1lbnRDaGlsZCIsIm5ld1JvdyIsInRpbWVWYWx1ZSIsInByb2dyYW1OYW1lQ2hhbmdlRWxlbSIsInByb2dyYW1EdXJhdGlvblZhbHVlIiwiYnRuT3JkZXJQbHVzIiwiYnRuT3JkZXJNaW51cyIsImJ0bkRlbGV0ZSIsInB1c2giLCJJbnB1dEZpbmQiLCJvblNlbGVjdFByb2dyYW0iLCJvbkRlbGV0ZUJ0bkNsaWNrIiwib25PcmRlclBsdXNCdG5DbGljayIsIm9uT3JkZXJNaW51c0J0bkNsaWNrIiwicm93Iiwicm93QXJySWR4IiwiZmluZEluZGV4IiwicGFyZW50RWxlbWVudCIsImluc2VydEJlZm9yZSIsImNvbnNvbGUiLCJsb2ciLCJuZXh0Um93Iiwib3JkZXIiLCJyb3dUaW1lUGx1cyIsInJvd1RpbWVNaW51cyIsInByZXZpb3VzUm93IiwiaG91cnMiLCJNYXRoIiwiZmxvb3IiLCJtaW5zIiwidGltZSIsIm1pbnV0ZXMiLCJyb3VuZCIsInRpbWVBcnIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEcsK0JDaEZyRCwwS0FBTyxJQUFNQyxFQUFpQix1QkFDakJDLEVBQWdCLGlCQUV0QixTQUFTQyxFQUFvQkMsR0FDaEMsT0FBT0EsRUFBZ0JDLGtCQUFrQkMsVUFHdEMsU0FBU0MsRUFBb0JILEVBQThCbEIsR0FDOUQsT0FBT2tCLEVBQWdCQyxrQkFBa0JDLFVBQVlwQixFQUdsRCxTQUFTc0IsRUFBMEJDLEdBQ3RDLElBQUlDLE1BQU1ELEVBQU0sQ0FDWkUsTUFBTyxPQUNQeEMsUUFBUyxDQUNMeUMsUUFBUyxDQUNMLENBQUMsQ0FBRSxLQUFRLENBQUMsU0FBUyxFQUFPLFFBQVMsVUFDckMsQ0FBQyxPQUFRLFNBQVUsWUFBYSxVQUNoQyxDQUFDLENBQUUsT0FBVSxPQUFTLENBQUUsT0FBVSxTQUFXLENBQUUsTUFBUyxJQUFNLGUsa0JDcEI5RTVDLEVBQU9ELFFBQVUsSUFBMEIsaUIsK0NDQTNDLGFBUUksV0FDSThDLEVBQ1FDLEVBQ0FDLEVBQ0FDLEdBSlosV0FFWSxLQUFBRixhQUNBLEtBQUFDLGVBQ0EsS0FBQUMsWUFWSixLQUFBQyxLQUlKLEdBUUFDLEtBQUtELEtBQUtFLEtBQU9OLEVBQ2pCSyxLQUFLRCxLQUFLRSxLQUFLQyxVQUFVQyxJQUFJLGNBQzdCSCxLQUFLRCxLQUFLRSxLQUFLYixVQUFZLEdBQzNCWSxLQUFLRCxLQUFLSyxNQUFRQyxTQUFTQyxjQUFjLFNBQ3pDTixLQUFLRCxLQUFLSyxNQUFNcEMsTUFBUWdDLEtBQUtILGFBQWVHLEtBQUtILGFBQWFHLEtBQUtGLFdBQWEsR0FDaEZFLEtBQUtELEtBQUtRLGdCQUFrQkYsU0FBU0MsY0FBYyxPQUNuRE4sS0FBS0QsS0FBS1EsZ0JBQWdCTCxVQUFVQyxJQUFJLGdDQUV4Q0gsS0FBS0QsS0FBS0ssTUFBTUksaUJBQWlCLFFBQVNSLEtBQUtTLG1CQUFtQmxDLEtBQUt5QixPQUN2RSxJQUFNVSxFQUFtQixTQUFDQyxHQUNqQixFQUFLWixLQUFLRSxLQUFLVyxTQUFTRCxFQUFNRSxVQUMvQlIsU0FBU1Msb0JBQW9CLFlBQWFKLEdBQzFDLEVBQUtYLEtBQUtRLGdCQUFnQkwsVUFBVWEsT0FBTyxZQUMzQyxFQUFLaEIsS0FBS0ssTUFBTXBDLE1BQVEsRUFBSzZCLGFBQWUsRUFBS0EsYUFBYSxFQUFLQyxXQUFhLEtBR3hGRSxLQUFLRCxLQUFLSyxNQUFNSSxpQkFBaUIsU0FBUyxXQUN0Q0gsU0FBU0csaUJBQWlCLFlBQWFFLEdBQ3ZDLEVBQUtELHdCQUVUVCxLQUFLRCxLQUFLUSxnQkFBZ0JDLGlCQUFpQixRQUFTUixLQUFLZ0IsY0FBY3pDLEtBQUt5QixLQUFNVSxJQUVsRlYsS0FBS0QsS0FBS0UsS0FBS2dCLFlBQVlqQixLQUFLRCxLQUFLSyxPQUNyQ0osS0FBS0QsS0FBS0UsS0FBS2dCLFlBQVlqQixLQUFLRCxLQUFLUSxpQkE2QzdDLE9BMUNZLFlBQUFXLEtBQVIsc0JBQ1VDLEVBQVFuQixLQUFLRCxLQUFLSyxNQUFNcEMsTUFBTW9ELE1BQU0sYUFBYUMsUUFBTyxTQUFDQyxFQUFNQyxFQUFLQyxHQUN0RSxRQUFTRixFQUFLRyxPQUFTLEdBQUtELEVBQUlFLFlBQVlKLEdBQVFDLE1BRXhELEdBQXFCLElBQWpCSixFQUFNTSxPQUFjLE1BQU8sR0FFL0IsSUFBSUUsRUFBUzNCLEtBQUtKLFdBQVdnQyxLQUFJLFNBQUNOLEVBQU1DLEdBRXBDLElBREEsSUFBTU0sRUFBVSxDQUFFN0QsTUFBT3NELEVBQU1RLGNBQWUsRUFBR0MsT0FBUVIsR0FDeEMsTUFBQUosRUFBQSxlQUFPLENBQW5CLElBQUlhLEVBQUksS0FDTCxJQUFLQyxPQUFPLElBQUlELEVBQUksc0JBQXNCQSxFQUFJLHNCQUFzQkEsRUFBSSxJQUFLLEtBQU1FLEtBQUtaLEVBQUssRUFBS3hCLGFBQ2xHK0IsRUFBUUMsZ0JBR2hCLE9BQU9ELEtBQ1JSLFFBQU8sU0FBQ0MsR0FBUyxPQUFBQSxFQUFLUSxjQUFnQixLQUV6QyxPQURBSCxFQUFPUSxNQUFLLFNBQUNDLEVBQU9DLEdBQVUsT0FBQUEsRUFBTVAsY0FBZ0JNLEVBQU1OLGlCQUNuREgsR0FHSCxZQUFBbEIsbUJBQVIsV0FDSVQsS0FBS0QsS0FBS1EsZ0JBQWdCbkIsVUFBWSxHQUV0QyxJQURBLElBQ2lCLE1BREFZLEtBQUtrQixPQUNMLGVBQVksQ0FBeEIsSUFBSUksRUFBSSxLQUNIZ0IsRUFBV2pDLFNBQVNDLGNBQWMsT0FDeENnQyxFQUFTQyxRQUFRQyxZQUFjbEIsRUFBS1MsT0FBUyxHQUM3Q08sRUFBU0csVUFBWW5CLEVBQUt0RCxNQUFNZ0MsS0FBS0YsV0FDckN3QyxFQUFTcEMsVUFBVUMsSUFBSSwyQkFDdkJILEtBQUtELEtBQUtRLGdCQUFnQlUsWUFBWXFCLEdBRTFDdEMsS0FBS0QsS0FBS1EsZ0JBQWdCTCxVQUFVQyxJQUFJLFlBQ3hDSCxLQUFLRCxLQUFLUSxnQkFBZ0JtQyxVQUFZLEdBR2xDLFlBQUExQixjQUFSLFNBQXNCTixHQUNsQkwsU0FBU1Msb0JBQW9CLFlBQWFKLEdBQzFDLElBQU1mLEVBQVVnQixNQUFNRSxPQUNqQmxCLEVBQVFPLFVBQVVVLFNBQVMsNkJBQ2hDWixLQUFLSCxhQUFlRyxLQUFLSixZQUFZRCxFQUFRNEMsUUFBUUMsYUFDckR4QyxLQUFLRCxLQUFLSyxNQUFNcEMsTUFBUWdDLEtBQUtILGFBQWFHLEtBQUtGLFdBQy9DRSxLQUFLRCxLQUFLUSxnQkFBZ0JMLFVBQVVhLE9BQU8sWUFDM0NmLEtBQUtELEtBQUtFLEtBQUswQyxjQUFjLElBQUlDLFlBQVksa0JBQW1CLENBQUVDLE9BQVEsQ0FBRTdFLE1BQU9nQyxLQUFLSCxtQkFFaEcsRUFsRkEsRyxPQ21PQSxJQTdOQSxXQWVJLGFBTEEsS0FBQWlELFNBQXNCLEdBQ3RCLEtBQUFDLGVBQWtDLEdBRWxDLEtBQUFDLEtBQWMsR0FHVixJQUFNQyxFQUFXNUMsU0FBUzZDLHVCQUF1Qiw0QkFBNEIsR0FDN0VsRCxLQUFLRCxLQUFPLENBQ1JFLEtBQU1nRCxFQUNORSxPQUFRRixFQUFTRyxjQUFjLG9CQUMvQkMsUUFBU0osRUFBU0csY0FBYyxxQkFDaENFLFVBQVdMLEVBQVNHLGNBQWMsdUJBQ2xDRyxVQUFXTixFQUFTQyx1QkFBdUIsY0FBYyxHQUN6RE0sY0FBZVAsRUFBU0MsdUJBQXVCLGVBQWUsSUFHbEVsRCxLQUFLRCxLQUFLb0QsT0FBTzNDLGlCQUFpQixRQUFTUixLQUFLeUQsY0FBY2xGLEtBQUt5QixPQUNuRUEsS0FBS0QsS0FBS3VELFVBQVU5QyxpQkFBaUIsUUFBU1IsS0FBSzBELGlCQUFpQm5GLEtBQUt5QixPQUN6RUEsS0FBS0QsS0FBS3NELFFBQVE3QyxpQkFBaUIsUUFBU1IsS0FBSzJELGVBQWVwRixLQUFLeUIsT0FDckVBLEtBQUtELEtBQUt3RCxVQUFVdkYsT0FBUSxJQUFJNEYsTUFBT0MsY0FBZ0IsS0FBTSxJQUFJRCxNQUFPRSxXQUFhLEtBQU0sSUFBSUYsTUFBT0csVUFDdEcvRCxLQUFLRCxLQUFLd0QsVUFBVS9DLGlCQUFpQixTQUFVUixLQUFLZ0UsYUFBYXpGLEtBQUt5QixPQUN0RUEsS0FBS2dFLGVBNExiLE9BekxJLFlBQUFBLGFBQUEsc0JBQ0ksR0FBS2hFLEtBQUtELEtBQUt3RCxVQUFVdkYsTUFBekIsQ0FDQSxJQUFNaUcsRUFBTUMsTUFBTSxJQUFpQiwyQkFBMkJDLE1BQUssU0FBQ0MsR0FBUyxPQUFBQSxFQUFLQyxVQUM1RUMsRUFBTUosTUFDUixJQUFpQixvQ0FBcUMsSUFBSU4sS0FBSzVELEtBQUtELEtBQUt3RCxVQUFVdkYsUUFDckZtRyxNQUFLLFNBQUNDLEdBQVMsT0FBQUEsRUFBS0MsVUFFdEJFLFFBQVFDLElBQUksQ0FBQ1AsRUFBS0ssSUFBTUgsTUFBSyxTQUFDTSxHQUMxQixFQUFLM0IsU0FBVzJCLEVBQUssR0FDckIsRUFBSzFCLGVBQWlCMEIsRUFBSyxHQUUzQixFQUFLMUUsS0FBS3lELGNBQWNwRSxVQUFZLEdBQ3BDLEksZUFBU2tDLEdBQ0xBLEVBQUtvRCxRQUFVLEVBQUs1QixTQUFTNUIsTUFBSyxTQUFDbUIsR0FBVSxPQUFBQSxFQUFNc0MsS0FBT3JELEVBQUtzRCxjQUMvRCxFQUFLQyxPQUFPdkQsSUFGQyxRQUFLeUIsZUFBTCxlQUFxQixDLEVBQXpCLE1BSWIsRUFBSytCLHFCQUliLFlBQUFELE9BQUEsU0FBT0UsR0FDSC9FLEtBQUtELEtBQUt5RCxjQUFjd0IsbUJBQW1CLFlBQ3ZDLDhDQUE4Q0QsRUFBY0osR0FBRSwyZUFTakIzRSxLQUFLaUYsZ0JBQWdCRixFQUFjTCxRQUFRUSxVQUFVQyxJQUFHLHNaQVV6RyxJQUFNQyxFQUFhcEYsS0FBS0QsS0FBS3lELGNBQWM2QixpQkFDckNDLEVBQVMsQ0FDWHZGLEtBQU0sQ0FDRkUsS0FBTW1GLEVBQ05HLFVBQVdILEVBQVdoQyxjQUFjLHlDQUNwQ29DLHNCQUF1QkosRUFBV2hDLGNBQWMsdURBQ2hEcUMscUJBQXNCTCxFQUFXaEMsY0FBYyxxREFDL0NzQyxhQUFjTixFQUFXaEMsY0FBYywyQkFDdkN1QyxjQUFlUCxFQUFXaEMsY0FBYyw0QkFDeEN3QyxVQUFXUixFQUFXaEMsY0FBYyx3QkFFeENwRixNQUFPK0csR0FFWC9FLEtBQUtnRCxLQUFLNkMsS0FBS1AsR0FFZixJQUFJUSxFQUNBUixFQUFPdkYsS0FBS3lGLHNCQUNaeEYsS0FBSzhDLFNBQ0xpQyxFQUFjTCxRQUNkLFFBRUpZLEVBQU92RixLQUFLeUYsc0JBQXNCaEYsaUJBQWlCLGtCQUFtQlIsS0FBSytGLGdCQUFnQnhILEtBQUt5QixLQUFNc0YsSUFDdEdBLEVBQU92RixLQUFLNkYsVUFBVXBGLGlCQUFpQixRQUFTUixLQUFLZ0csaUJBQWlCekgsS0FBS3lCLEtBQU1zRixJQUNqRkEsRUFBT3ZGLEtBQUsyRixhQUFhbEYsaUJBQWlCLFFBQVNSLEtBQUtpRyxvQkFBb0IxSCxLQUFLeUIsS0FBTXNGLElBQ3ZGQSxFQUFPdkYsS0FBSzRGLGNBQWNuRixpQkFBaUIsUUFBU1IsS0FBS2tHLHFCQUFxQjNILEtBQUt5QixLQUFNc0YsS0FHN0YsWUFBQTNCLGVBQUEsV0FDSTNELEtBQUtELEtBQUtFLEtBQUtDLFVBQVVhLE9BQU8sYUFFcEMsWUFBQTJDLGlCQUFBLFdBQ0kxRCxLQUFLRCxLQUFLRSxLQUFLQyxVQUFVYSxPQUFPLGFBR3BDLFlBQUEwQyxjQUFBLGFBRUEsWUFBQXNDLGdCQUFBLFNBQWdCSSxHQUNabkcsS0FBS0QsS0FBS0UsS0FBS0MsVUFBVUMsSUFBSSxZQUM3QmdHLEVBQUluSSxNQUFNMEcsUUFBVy9ELE1BQXNCa0MsT0FBTzdFLE1BQ2xEbUksRUFBSW5JLE1BQU00RyxXQUFhdUIsRUFBSW5JLE1BQU0wRyxRQUFRQyxHQUN6Q3dCLEVBQUlwRyxLQUFLMEYscUJBQXFCaEQsVUFBWXpDLEtBQUtpRixnQkFBZ0JrQixFQUFJbkksTUFBTTBHLFFBQVFRLFVBQVVDLEtBRy9GLFlBQUFjLG9CQUFBLFNBQW9CRSxHQUNoQixJQUFNQyxFQUFZcEcsS0FBS2dELEtBQUtxRCxXQUFVLFNBQUMvRSxHQUFTLE9BQUFBLEVBQUt0RCxNQUFNMkcsS0FBT3dCLEVBQUluSSxNQUFNMkcsTUFTNUUsR0FQSXlCLEVBQVlwRyxLQUFLZ0QsS0FBS3ZCLE9BQVMsR0FDL0IwRSxFQUFJcEcsS0FBS0UsS0FBS3FHLGNBQWNDLGFBQWFKLEVBQUlwRyxLQUFLRSxLQUFNRCxLQUFLZ0QsS0FBS29ELEVBQVksR0FBR3JHLEtBQUtFLE1BQ3RGdUcsUUFBUUMsSUFBSXpHLEtBQUtnRCxLQUFLb0QsRUFBWSxHQUFHckcsS0FBS0UsT0FDbkNtRyxFQUFZcEcsS0FBS2dELEtBQUt2QixPQUFTLEdBQ3RDMEUsRUFBSXBHLEtBQUtFLEtBQUtxRyxjQUFjckYsWUFBWWtGLEVBQUlwRyxLQUFLRSxNQUdqRG1HLEVBQVlwRyxLQUFLZ0QsS0FBS3ZCLE9BQVMsRUFBRyxDQUNsQ3pCLEtBQUtELEtBQUtFLEtBQUtDLFVBQVVDLElBQUksWUFDN0IsSUFBTXVHLEVBQVUxRyxLQUFLZ0QsS0FBS29ELEVBQVksR0FDdENwRyxLQUFLZ0QsS0FBS29ELEVBQVksR0FBS0QsRUFDM0JuRyxLQUFLZ0QsS0FBS29ELEdBQWFNLEVBQ3ZCUCxFQUFJbkksTUFBTTJJLFFBQ1ZELEVBQVExSSxNQUFNMkksUUFDZDNHLEtBQUs0RyxZQUFZVCxFQUFLTyxFQUFRMUksTUFBTTBHLFFBQVFRLFVBQzVDbEYsS0FBSzZHLGFBQWFILEVBQVNQLEVBQUluSSxNQUFNMEcsUUFBUVEsWUFJckQsWUFBQWdCLHFCQUFBLFNBQXFCQyxHQUNqQixJQUFNQyxFQUFZcEcsS0FBS2dELEtBQUtxRCxXQUFVLFNBQUMvRSxHQUFTLE9BQUFBLEVBQUt0RCxNQUFNMkcsS0FBT3dCLEVBQUluSSxNQUFNMkcsTUFFNUUsR0FBSXlCLEVBQVksRUFBRyxDQUNmcEcsS0FBS0QsS0FBS0UsS0FBS0MsVUFBVUMsSUFBSSxZQUM3QixJQUFNMkcsRUFBYzlHLEtBQUtnRCxLQUFLb0QsRUFBWSxHQUMxQ0QsRUFBSXBHLEtBQUtFLEtBQUtxRyxjQUFjQyxhQUFhSixFQUFJcEcsS0FBS0UsS0FBTTZHLEVBQVkvRyxLQUFLRSxNQUN6RUQsS0FBS2dELEtBQUtvRCxFQUFZLEdBQUtELEVBQzNCbkcsS0FBS2dELEtBQUtvRCxHQUFhVSxFQUN2QlgsRUFBSW5JLE1BQU0ySSxRQUNWRyxFQUFZOUksTUFBTTJJLFFBQ2xCM0csS0FBSzZHLGFBQWFWLEVBQUtXLEVBQVk5SSxNQUFNMEcsUUFBUVEsVUFDakRsRixLQUFLNEcsWUFBWUUsRUFBYVgsRUFBSW5JLE1BQU0wRyxRQUFRUSxZQUl4RCxZQUFBYyxpQkFBQSxTQUFpQkcsS0FjakIsWUFBQWxCLGdCQUFBLFNBQWdCQyxHQUNaLElBQU02QixFQUFRQyxLQUFLQyxNQUFNL0IsRUFBVyxNQUM5QmdDLEVBQU9GLEtBQUtDLE9BQU8vQixFQUFtQixLQUFSNkIsR0FBbUIsS0FFdkQsTUFBTyxDQUFFQSxNQUFLLEVBQUVHLEtBQUksRUFBRS9CLEtBRFQ0QixFQUFRLEVBQUlBLEVBQVEsTUFBUSxLQUFPRyxFQUFPLEdBQWUsSUFBVkgsRUFBY0csRUFBTyxPQUFTLE1BSTlGLFlBQUFwQyxjQUFBLFdBS0ksSUFKQSxJQUFNcUMsRUFBTyxDQUNUSixNQUFPLEVBQ1BLLFFBQVMsR0FFRyxNQUFBcEgsS0FBS2dELEtBQUwsZUFBVyxDQUF0QixJQUFJbUQsRUFBRyxLQUdSLElBRkFBLEVBQUlwRyxLQUFLd0YsVUFBVTlDLFdBQWdCMEUsRUFBS0osTUFBUSxHQUFLLElBQU0sSUFBTUksRUFBS0osTUFBSyxLQUFLSSxFQUFLQyxRQUFVLEdBQUssSUFBTSxJQUFNRCxFQUFLQyxRQUNySEQsRUFBS0MsU0FBV0osS0FBS0ssTUFBTWxCLEVBQUluSSxNQUFNMEcsUUFBUVEsU0FBVyxLQUNqRGlDLEVBQUtDLFFBQVUsSUFDbEJELEVBQUtDLFNBQVcsR0FDaEJELEVBQUtKLFVBS2pCLFlBQUFILFlBQUEsU0FBWVQsRUFBVWpCLEdBQ2xCLElBQU1vQyxFQUFVbkIsRUFBSXBHLEtBQUt3RixVQUFVOUMsVUFBVXJCLE1BQU0sS0FDN0MrRixFQUFPLENBQ1RKLE9BQVFPLEVBQVEsR0FDaEJGLFNBQVVFLEVBQVEsSUFHdEIsSUFEQUgsRUFBS0MsU0FBV0osS0FBS0ssTUFBTW5DLEVBQVcsS0FDL0JpQyxFQUFLQyxRQUFVLElBQ2xCRCxFQUFLQyxTQUFXLEdBQ2hCRCxFQUFLSixRQUVUWixFQUFJcEcsS0FBS3dGLFVBQVU5QyxXQUFnQjBFLEVBQUtKLE1BQVEsR0FBSyxJQUFNLElBQU1JLEVBQUtKLE1BQUssS0FBS0ksRUFBS0MsUUFBVSxHQUFLLElBQU0sSUFBTUQsRUFBS0MsU0FHekgsWUFBQVAsYUFBQSxTQUFhVixFQUFVakIsR0FDbkIsSUFBTW9DLEVBQVVuQixFQUFJcEcsS0FBS3dGLFVBQVU5QyxVQUFVckIsTUFBTSxLQUM3QytGLEVBQU8sQ0FDVEosT0FBUU8sRUFBUSxHQUNoQkYsU0FBVUUsRUFBUSxJQUd0QixJQURBSCxFQUFLQyxTQUFXSixLQUFLSyxNQUFNbkMsRUFBVyxLQUMvQmlDLEVBQUtDLFFBQVUsR0FDbEJELEVBQUtDLFNBQVcsR0FDaEJELEVBQUtKLFFBRVRaLEVBQUlwRyxLQUFLd0YsVUFBVTlDLFdBQWdCMEUsRUFBS0osTUFBUSxHQUFLLElBQU0sSUFBTUksRUFBS0osTUFBSyxLQUFLSSxFQUFLQyxRQUFVLEdBQUssSUFBTSxJQUFNRCxFQUFLQyxTQUU3SCxFQTNOQSIsImZpbGUiOiJzY2hlbGR1bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNik7XG4iLCJkZWNsYXJlIGxldCBRdWlsbDtcblxuZXhwb3J0IGNvbnN0IGJhY2tlbmRBZGRyZXNzID0gXCJodHRwOi8vMS01Y2hhbm5lbC50dlwiO1xuZXhwb3J0IGNvbnN0IGltYWdlc1VybFJvb3QgPSBcIi9maWxlcy9pbWFnZXMvXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRRdWlsbEVkaXRvclZhbHVlKHF1aWxsRWRpdG9yRWxlbTogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gcXVpbGxFZGl0b3JFbGVtLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFF1aWxsRWRpdG9yVmFsdWUocXVpbGxFZGl0b3JFbGVtOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiBxdWlsbEVkaXRvckVsZW0uZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MID0gdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGFuZGFydFF1aWxsRWRpdG9yKGVsZW06IEhUTUxFbGVtZW50KSB7XG4gICAgbmV3IFF1aWxsKGVsZW0sIHtcbiAgICAgICAgdGhlbWU6ICdzbm93JyxcbiAgICAgICAgbW9kdWxlczoge1xuICAgICAgICAgICAgdG9vbGJhcjogW1xuICAgICAgICAgICAgICAgIFt7ICdzaXplJzogWydzbWFsbCcsIGZhbHNlLCAnbGFyZ2UnLCAnaHVnZSddIH1dLFxuICAgICAgICAgICAgICAgIFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJywgJ3N0cmlrZSddLFxuICAgICAgICAgICAgICAgIFt7ICdzY3JpcHQnOiAnc3ViJyB9LCB7ICdzY3JpcHQnOiAnc3VwZXInIH0sIHsgJ2NvbG9yJzogW10gfSwgJ2NsZWFuJ10sXG4gICAgICAgICAgICBdLFxuXG4gICAgICAgIH1cbiAgICB9KTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzY2hlbGR1bGUuY3NzXCI7IiwiZXhwb3J0IGNsYXNzIElucHV0RmluZDxJdGVtVHlwZT4ge1xuXG4gICAgcHJpdmF0ZSBodG1sOiB7XG4gICAgICAgIHJvb3Q/OiBIVE1MRWxlbWVudDtcbiAgICAgICAgaW5wdXQ/OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICB2YWx1ZXNDb250YWluZXI/OiBIVE1MRWxlbWVudDtcbiAgICB9ID0ge31cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbiAgICAgICAgcHJpdmF0ZSB2YWx1ZXNMaXN0OiBJdGVtVHlwZVtdLFxuICAgICAgICBwcml2YXRlIGN1cnJlbnRWYWx1ZTogSXRlbVR5cGUgfCBudWxsLFxuICAgICAgICBwcml2YXRlIGZpbmRGaWVsZDogc3RyaW5nXG4gICAgKSB7XG4gICAgICAgIHRoaXMuaHRtbC5yb290ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5odG1sLnJvb3QuY2xhc3NMaXN0LmFkZChcImlucHV0LWZpbmRcIik7XG4gICAgICAgIHRoaXMuaHRtbC5yb290LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIHRoaXMuaHRtbC5pbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgdGhpcy5odG1sLmlucHV0LnZhbHVlID0gdGhpcy5jdXJyZW50VmFsdWUgPyB0aGlzLmN1cnJlbnRWYWx1ZVt0aGlzLmZpbmRGaWVsZF0gOiBcIlwiO1xuICAgICAgICB0aGlzLmh0bWwudmFsdWVzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5odG1sLnZhbHVlc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaW5wdXQtZmluZF9fdmFsdWVzLWNvbnRhaW5lclwiKTtcblxuICAgICAgICB0aGlzLmh0bWwuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuZGlzcGxheUZpbmRSZXp1bHRzLmJpbmQodGhpcykpO1xuICAgICAgICBjb25zdCB2aXNpYmxlTGlzdGVubmVyID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaHRtbC5yb290LmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHZpc2libGVMaXN0ZW5uZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuaHRtbC52YWx1ZXNDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcIl92aXNpYmxlXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuaHRtbC5pbnB1dC52YWx1ZSA9IHRoaXMuY3VycmVudFZhbHVlID8gdGhpcy5jdXJyZW50VmFsdWVbdGhpcy5maW5kRmllbGRdIDogXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5odG1sLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHZpc2libGVMaXN0ZW5uZXIpXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlGaW5kUmV6dWx0cygpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5odG1sLnZhbHVlc0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vblNlbGVjdFZhbHVlLmJpbmQodGhpcywgdmlzaWJsZUxpc3Rlbm5lcikpO1xuXG4gICAgICAgIHRoaXMuaHRtbC5yb290LmFwcGVuZENoaWxkKHRoaXMuaHRtbC5pbnB1dCk7XG4gICAgICAgIHRoaXMuaHRtbC5yb290LmFwcGVuZENoaWxkKHRoaXMuaHRtbC52YWx1ZXNDb250YWluZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmluZCgpIHtcbiAgICAgICAgY29uc3Qgd29yZHMgPSB0aGlzLmh0bWwuaW5wdXQudmFsdWUuc3BsaXQoL1tcXHMuLC1dKy9pKS5maWx0ZXIoKGl0ZW0sIGlkeCwgYXJyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIShpdGVtLmxlbmd0aCA8IDIgfHwgYXJyLmxhc3RJbmRleE9mKGl0ZW0pID4gaWR4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh3b3Jkcy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcblxuICAgICAgICBsZXQgcmV6dWx0ID0gdGhpcy52YWx1ZXNMaXN0Lm1hcCgoaXRlbSwgaWR4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdJdGVtID0geyB2YWx1ZTogaXRlbSwgd29yZHNRdWFudGl0eTogMCwgYXJySWR4OiBpZHggfTtcbiAgICAgICAgICAgIGZvciAobGV0IHdvcmQgb2Ygd29yZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoKG5ldyBSZWdFeHAoYF4ke3dvcmR9W1xcXFxzLiwtXSt8W1xcXFxzLiwtXSske3dvcmR9W1xcXFxzLiwtXSt8W1xcXFxzLiwtXSske3dvcmR9JGAsIFwiaVwiKSkudGVzdChpdGVtW3RoaXMuZmluZEZpZWxkXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3SXRlbS53b3Jkc1F1YW50aXR5KytcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld0l0ZW07XG4gICAgICAgIH0pLmZpbHRlcigoaXRlbSkgPT4gaXRlbS53b3Jkc1F1YW50aXR5ID4gMCk7XG4gICAgICAgIHJlenVsdC5zb3J0KChpdGVtMSwgaXRlbTIpID0+IGl0ZW0yLndvcmRzUXVhbnRpdHkgLSBpdGVtMS53b3Jkc1F1YW50aXR5KTtcbiAgICAgICAgcmV0dXJuIHJlenVsdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRpc3BsYXlGaW5kUmV6dWx0cygpIHtcbiAgICAgICAgdGhpcy5odG1sLnZhbHVlc0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICBsZXQgdHJ1ZVZhbHVlcyA9IHRoaXMuZmluZCgpO1xuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRydWVWYWx1ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGh0bWxJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGh0bWxJdGVtLmRhdGFzZXQudmFsdWVBcnJJZHggPSBpdGVtLmFycklkeCArIFwiXCI7XG4gICAgICAgICAgICBodG1sSXRlbS5pbm5lclRleHQgPSBpdGVtLnZhbHVlW3RoaXMuZmluZEZpZWxkXTtcbiAgICAgICAgICAgIGh0bWxJdGVtLmNsYXNzTGlzdC5hZGQoXCJpbnB1dC1maW5kX192YWx1ZXMtaXRlbVwiKTtcbiAgICAgICAgICAgIHRoaXMuaHRtbC52YWx1ZXNDb250YWluZXIuYXBwZW5kQ2hpbGQoaHRtbEl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaHRtbC52YWx1ZXNDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIl92aXNpYmxlXCIpO1xuICAgICAgICB0aGlzLmh0bWwudmFsdWVzQ29udGFpbmVyLnNjcm9sbFRvcCA9IDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNlbGVjdFZhbHVlKHZpc2libGVMaXN0ZW5uZXIpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB2aXNpYmxlTGlzdGVubmVyKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgaWYgKCFlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImlucHV0LWZpbmRfX3ZhbHVlcy1pdGVtXCIpKSByZXR1cm47XG4gICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gdGhpcy52YWx1ZXNMaXN0WytlbGVtZW50LmRhdGFzZXQudmFsdWVBcnJJZHhdO1xuICAgICAgICB0aGlzLmh0bWwuaW5wdXQudmFsdWUgPSB0aGlzLmN1cnJlbnRWYWx1ZVt0aGlzLmZpbmRGaWVsZF07XG4gICAgICAgIHRoaXMuaHRtbC52YWx1ZXNDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcIl92aXNpYmxlXCIpO1xuICAgICAgICB0aGlzLmh0bWwucm9vdC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImlucHV0RmluZENoYW5nZVwiLCB7IGRldGFpbDogeyB2YWx1ZTogdGhpcy5jdXJyZW50VmFsdWUgfSB9KSk7XG4gICAgfVxufSIsImltcG9ydCBcIi4vc2NoZWxkdWxlLnNjc3NcIjtcbmltcG9ydCBcIi4uLy4uL2NvbXBvbmVudHMvaW5wdXQtZmluZC9pbnB1dC1maW5kXCJcbmltcG9ydCB7IGJhY2tlbmRBZGRyZXNzIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2NvbW1vblwiO1xuaW1wb3J0IHsgSW5wdXRGaW5kIH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvaW5wdXQtZmluZC9pbnB1dC1maW5kXCJcbmV4cG9ydCB7IH07XG5cbmNsYXNzIFNjaGVsZHVsZVBhZ2Uge1xuICAgIGh0bWw6IHtcbiAgICAgICAgcm9vdDogSFRNTEVsZW1lbnQ7XG4gICAgICAgIGFkZEJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgICAgIHNhdmVCdG46IEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgICBjYW5jZWxCdG46IEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgICBkYXRlSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIHJvd3NDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIH07XG5cbiAgICBwcm9ncmFtczogUHJvZ3JhbVtdID0gW107XG4gICAgc2NoZWxkdWxlSXRlbXM6IFNjaGVsZHVsZUl0ZW1bXSA9IFtdO1xuXG4gICAgcm93czogUm93W10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBjb21wUm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzY2hlbGR1bGUtY3J1ZC1jb250YWluZXJcIilbMF0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuaHRtbCA9IHtcbiAgICAgICAgICAgIHJvb3Q6IGNvbXBSb290LFxuICAgICAgICAgICAgYWRkQnRuOiBjb21wUm9vdC5xdWVyeVNlbGVjdG9yKFwiLnRhYmxlX19idG4uX2FkZFwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudCxcbiAgICAgICAgICAgIHNhdmVCdG46IGNvbXBSb290LnF1ZXJ5U2VsZWN0b3IoXCIudGFibGVfX2J0bi5fc2F2ZVwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudCxcbiAgICAgICAgICAgIGNhbmNlbEJ0bjogY29tcFJvb3QucXVlcnlTZWxlY3RvcihcIi50YWJsZV9fYnRuLl9jYW5jZWxcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQsXG4gICAgICAgICAgICBkYXRlSW5wdXQ6IGNvbXBSb290LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJkYXRlLWlucHV0XCIpWzBdIGFzIEhUTUxJbnB1dEVsZW1lbnQsXG4gICAgICAgICAgICByb3dzQ29udGFpbmVyOiBjb21wUm9vdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidGFibGVfX2JvZHlcIilbMF0gYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5odG1sLmFkZEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkFkZEJ0bkNsaWNrLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmh0bWwuY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2FuY2VsQnRuQ2xpY2suYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuaHRtbC5zYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uU2F2ZUJ0bkNsaWNrLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmh0bWwuZGF0ZUlucHV0LnZhbHVlID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpICsgXCItXCIgKyBuZXcgRGF0ZSgpLmdldE1vbnRoKCkgKyBcIi1cIiArIG5ldyBEYXRlKCkuZ2V0RGF0ZSgpO1xuICAgICAgICB0aGlzLmh0bWwuZGF0ZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcy5vbkRhdGVDaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMub25EYXRlQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgb25EYXRlQ2hhbmdlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaHRtbC5kYXRlSW5wdXQudmFsdWUpIHJldHVybjtcbiAgICAgICAgY29uc3QgcHIxID0gZmV0Y2goYmFja2VuZEFkZHJlc3MgKyBgL2FwaS9wcm9ncmFtL2dldEFsbC5waHBgKS50aGVuKChyZXNwKSA9PiByZXNwLmpzb24oKSk7XG4gICAgICAgIGNvbnN0IHByMiA9IGZldGNoKFxuICAgICAgICAgICAgYmFja2VuZEFkZHJlc3MgKyBgL2FwaS9zY2hlbGR1bGUvZ2V0QWxsLnBocD9kYXRlPWAgKyArbmV3IERhdGUodGhpcy5odG1sLmRhdGVJbnB1dC52YWx1ZSlcbiAgICAgICAgKS50aGVuKChyZXNwKSA9PiByZXNwLmpzb24oKSk7XG5cbiAgICAgICAgUHJvbWlzZS5hbGwoW3ByMSwgcHIyXSkudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcyA9IGRhdGFbMF07XG4gICAgICAgICAgICB0aGlzLnNjaGVsZHVsZUl0ZW1zID0gZGF0YVsxXTtcblxuICAgICAgICAgICAgdGhpcy5odG1sLnJvd3NDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5zY2hlbGR1bGVJdGVtcykge1xuICAgICAgICAgICAgICAgIGl0ZW0ucHJvZ3JhbSA9IHRoaXMucHJvZ3JhbXMuZmluZCgoaXRlbTIpID0+IGl0ZW0yLmlkID09PSBpdGVtLnByb2dyYW1faWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUm93KGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nZXRPcmRlcnNUaW1lKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFkZFJvdyhzY2hlbGR1bGVJdGVtOiBTY2hlbGR1bGVJdGVtKSB7XG4gICAgICAgIHRoaXMuaHRtbC5yb3dzQ29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJ0YWJsZV9fcm93XCIgZGF0YS1zY2hlbGR1bGUtaWQ9XCIke3NjaGVsZHVsZUl0ZW0uaWR9XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlX19jb250ZW50LWNlbGxzLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFibGVfX2NlbGwgX3RpbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZV9fY2VsbC12YWx1ZVwiPiR7XCJcIn08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZV9fY2VsbCBfcHJvZ3JhbS1uYW1lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFibGVfX2NlbGwtY2hhbmdlLWVsZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZV9fY2VsbCBfcHJvZ3JhbS1kdXJhdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlX19jZWxsLXZhbHVlXCI+JHt0aGlzLmNvbnZlcnREdXJhdGlvbihzY2hlbGR1bGVJdGVtLnByb2dyYW0uZHVyYXRpb24pLnN0cn08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlX19jZWxsIF9idG5zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwaSBwaS1hcnJvdy11cCB0YWJsZV9fYnRuIF9vcmRlci1taW51c1wiPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicGkgcGktYXJyb3ctZG93biB0YWJsZV9fYnRuIF9vcmRlci1wbHVzXCI+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwaSBwaS10cmFzaCB0YWJsZV9fYnRuIF9kZWxldGVcIj48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PmBcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbmV3Um93SHRtbCA9IHRoaXMuaHRtbC5yb3dzQ29udGFpbmVyLmxhc3RFbGVtZW50Q2hpbGQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IG5ld1JvdyA9IHtcbiAgICAgICAgICAgIGh0bWw6IHtcbiAgICAgICAgICAgICAgICByb290OiBuZXdSb3dIdG1sLFxuICAgICAgICAgICAgICAgIHRpbWVWYWx1ZTogbmV3Um93SHRtbC5xdWVyeVNlbGVjdG9yKFwiLnRhYmxlX19jZWxsLl90aW1lIC50YWJsZV9fY2VsbC12YWx1ZVwiKSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICBwcm9ncmFtTmFtZUNoYW5nZUVsZW06IG5ld1Jvd0h0bWwucXVlcnlTZWxlY3RvcihcIi50YWJsZV9fY2VsbC5fcHJvZ3JhbS1uYW1lIC50YWJsZV9fY2VsbC1jaGFuZ2UtZWxlbVwiKSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICBwcm9ncmFtRHVyYXRpb25WYWx1ZTogbmV3Um93SHRtbC5xdWVyeVNlbGVjdG9yKFwiLnRhYmxlX19jZWxsLl9wcm9ncmFtLWR1cmF0aW9uIC50YWJsZV9fY2VsbC12YWx1ZVwiKSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICBidG5PcmRlclBsdXM6IG5ld1Jvd0h0bWwucXVlcnlTZWxlY3RvcihcIi50YWJsZV9fYnRuLl9vcmRlci1wbHVzXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50LFxuICAgICAgICAgICAgICAgIGJ0bk9yZGVyTWludXM6IG5ld1Jvd0h0bWwucXVlcnlTZWxlY3RvcihcIi50YWJsZV9fYnRuLl9vcmRlci1taW51c1wiKSBhcyBIVE1MQnV0dG9uRWxlbWVudCxcbiAgICAgICAgICAgICAgICBidG5EZWxldGU6IG5ld1Jvd0h0bWwucXVlcnlTZWxlY3RvcihcIi50YWJsZV9fYnRuLl9kZWxldGVcIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWx1ZTogc2NoZWxkdWxlSXRlbVxuICAgICAgICB9IGFzIFJvdztcbiAgICAgICAgdGhpcy5yb3dzLnB1c2gobmV3Um93KTtcblxuICAgICAgICBuZXcgSW5wdXRGaW5kPFByb2dyYW0+KFxuICAgICAgICAgICAgbmV3Um93Lmh0bWwucHJvZ3JhbU5hbWVDaGFuZ2VFbGVtLFxuICAgICAgICAgICAgdGhpcy5wcm9ncmFtcyxcbiAgICAgICAgICAgIHNjaGVsZHVsZUl0ZW0ucHJvZ3JhbSxcbiAgICAgICAgICAgIFwibmFtZVwiXG4gICAgICAgICk7XG4gICAgICAgIG5ld1Jvdy5odG1sLnByb2dyYW1OYW1lQ2hhbmdlRWxlbS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRGaW5kQ2hhbmdlXCIsIHRoaXMub25TZWxlY3RQcm9ncmFtLmJpbmQodGhpcywgbmV3Um93KSk7XG4gICAgICAgIG5ld1Jvdy5odG1sLmJ0bkRlbGV0ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkRlbGV0ZUJ0bkNsaWNrLmJpbmQodGhpcywgbmV3Um93KSk7XG4gICAgICAgIG5ld1Jvdy5odG1sLmJ0bk9yZGVyUGx1cy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbk9yZGVyUGx1c0J0bkNsaWNrLmJpbmQodGhpcywgbmV3Um93KSk7XG4gICAgICAgIG5ld1Jvdy5odG1sLmJ0bk9yZGVyTWludXMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub25PcmRlck1pbnVzQnRuQ2xpY2suYmluZCh0aGlzLCBuZXdSb3cpKTtcbiAgICB9XG5cbiAgICBvblNhdmVCdG5DbGljaygpIHtcbiAgICAgICAgdGhpcy5odG1sLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShcIl9jaGFuZ2VkXCIpO1xuICAgIH1cbiAgICBvbkNhbmNlbEJ0bkNsaWNrKCkge1xuICAgICAgICB0aGlzLmh0bWwucm9vdC5jbGFzc0xpc3QucmVtb3ZlKFwiX2NoYW5nZWRcIik7XG4gICAgfVxuXG4gICAgb25BZGRCdG5DbGljaygpIHsgfVxuXG4gICAgb25TZWxlY3RQcm9ncmFtKHJvdzogUm93KSB7XG4gICAgICAgIHRoaXMuaHRtbC5yb290LmNsYXNzTGlzdC5hZGQoXCJfY2hhbmdlZFwiKTtcbiAgICAgICAgcm93LnZhbHVlLnByb2dyYW0gPSAoZXZlbnQgYXMgQ3VzdG9tRXZlbnQpLmRldGFpbC52YWx1ZTtcbiAgICAgICAgcm93LnZhbHVlLnByb2dyYW1faWQgPSByb3cudmFsdWUucHJvZ3JhbS5pZDtcbiAgICAgICAgcm93Lmh0bWwucHJvZ3JhbUR1cmF0aW9uVmFsdWUuaW5uZXJUZXh0ID0gdGhpcy5jb252ZXJ0RHVyYXRpb24ocm93LnZhbHVlLnByb2dyYW0uZHVyYXRpb24pLnN0cjtcbiAgICB9XG5cbiAgICBvbk9yZGVyUGx1c0J0bkNsaWNrKHJvdzogUm93KSB7XG4gICAgICAgIGNvbnN0IHJvd0FycklkeCA9IHRoaXMucm93cy5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0udmFsdWUuaWQgPT09IHJvdy52YWx1ZS5pZCk7XG5cbiAgICAgICAgaWYgKHJvd0FycklkeCA8IHRoaXMucm93cy5sZW5ndGggLSAyKSB7XG4gICAgICAgICAgICByb3cuaHRtbC5yb290LnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKHJvdy5odG1sLnJvb3QsIHRoaXMucm93c1tyb3dBcnJJZHggKyAyXS5odG1sLnJvb3QpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5yb3dzW3Jvd0FycklkeCArIDJdLmh0bWwucm9vdClcbiAgICAgICAgfSBlbHNlIGlmIChyb3dBcnJJZHggPCB0aGlzLnJvd3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcm93Lmh0bWwucm9vdC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKHJvdy5odG1sLnJvb3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvd0FycklkeCA8IHRoaXMucm93cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aGlzLmh0bWwucm9vdC5jbGFzc0xpc3QuYWRkKFwiX2NoYW5nZWRcIik7XG4gICAgICAgICAgICBjb25zdCBuZXh0Um93ID0gdGhpcy5yb3dzW3Jvd0FycklkeCArIDFdO1xuICAgICAgICAgICAgdGhpcy5yb3dzW3Jvd0FycklkeCArIDFdID0gcm93O1xuICAgICAgICAgICAgdGhpcy5yb3dzW3Jvd0FycklkeF0gPSBuZXh0Um93O1xuICAgICAgICAgICAgcm93LnZhbHVlLm9yZGVyKys7XG4gICAgICAgICAgICBuZXh0Um93LnZhbHVlLm9yZGVyLS07XG4gICAgICAgICAgICB0aGlzLnJvd1RpbWVQbHVzKHJvdywgbmV4dFJvdy52YWx1ZS5wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMucm93VGltZU1pbnVzKG5leHRSb3csIHJvdy52YWx1ZS5wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uT3JkZXJNaW51c0J0bkNsaWNrKHJvdzogUm93KSB7XG4gICAgICAgIGNvbnN0IHJvd0FycklkeCA9IHRoaXMucm93cy5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0udmFsdWUuaWQgPT09IHJvdy52YWx1ZS5pZCk7XG5cbiAgICAgICAgaWYgKHJvd0FycklkeCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuaHRtbC5yb290LmNsYXNzTGlzdC5hZGQoXCJfY2hhbmdlZFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzUm93ID0gdGhpcy5yb3dzW3Jvd0FycklkeCAtIDFdO1xuICAgICAgICAgICAgcm93Lmh0bWwucm9vdC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShyb3cuaHRtbC5yb290LCBwcmV2aW91c1Jvdy5odG1sLnJvb3QpO1xuICAgICAgICAgICAgdGhpcy5yb3dzW3Jvd0FycklkeCAtIDFdID0gcm93O1xuICAgICAgICAgICAgdGhpcy5yb3dzW3Jvd0FycklkeF0gPSBwcmV2aW91c1JvdztcbiAgICAgICAgICAgIHJvdy52YWx1ZS5vcmRlci0tO1xuICAgICAgICAgICAgcHJldmlvdXNSb3cudmFsdWUub3JkZXIrKztcbiAgICAgICAgICAgIHRoaXMucm93VGltZU1pbnVzKHJvdywgcHJldmlvdXNSb3cudmFsdWUucHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICB0aGlzLnJvd1RpbWVQbHVzKHByZXZpb3VzUm93LCByb3cudmFsdWUucHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkRlbGV0ZUJ0bkNsaWNrKHJvdzogUm93KSB7XG4gICAgICAgIC8vIGlmICghY29uZmlybShcItCl0L7RgNC+0YjQviDQv9C+0LTRg9C80LDQu9C4P1wiKSkgcmV0dXJuO1xuICAgICAgICAvLyBjb25zdCByb3cgPSBnZXRCdXR0b25zUm93KGV2ZW50LmN1cnJlbnRUYXJnZXQgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpO1xuICAgICAgICAvLyBjb25zdCByb3dFbGVtcyA9IGdldFJvd0VsZW1zKHJvdyk7XG4gICAgICAgIC8vIGF3YWl0IGZldGNoKGJhY2tlbmRBZGRyZXNzICsgXCIvYXBpL2FkdmVydGlzaW5nL2RlbGV0ZS5waHA/aWQ9XCIgKyByb3dFbGVtcy5pZC5pbm5lclRleHQsIHsgbWV0aG9kOiBcImRlbGV0ZVwiIH0pO1xuICAgICAgICAvLyBhZHZlcnRpc2luZ3MgPSBhZHZlcnRpc2luZ3MuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmlkICE9PSArcm93RWxlbXMuaWQuaW5uZXJUZXh0KTtcbiAgICAgICAgLy8gY29uc3Qgcm93T3JkZXIgPSArcm93LmRhdGFzZXQub3JkZXI7XG4gICAgICAgIC8vIHJvdy5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHJvdyk7XG4gICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykgaWYgKCtyb3dzW2ldLmRhdGFzZXQub3JkZXIgPiByb3dPcmRlcikge1xuICAgICAgICAvLyAgICAgcm93c1tpXS5kYXRhc2V0Lm9yZGVyID0gK3Jvd3NbaV0uZGF0YXNldC5vcmRlciAtIDEgKyBcIlwiO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGZvciAobGV0IGl0ZW0gb2YgYWR2ZXJ0aXNpbmdzKSBpZiAoaXRlbS5vcmRlciA+IHJvd09yZGVyKSBpdGVtLm9yZGVyLS07XG4gICAgfVxuXG4gICAgY29udmVydER1cmF0aW9uKGR1cmF0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKGR1cmF0aW9uIC8gMzYwMDAwMCk7XG4gICAgICAgIGNvbnN0IG1pbnMgPSBNYXRoLmZsb29yKChkdXJhdGlvbiAtIGhvdXJzICogMzYwMDAwMCkgLyA2MDAwMCk7XG4gICAgICAgIGNvbnN0IHN0ciA9IChob3VycyA+IDAgPyBob3VycyArIFwi0YcuIFwiIDogXCJcIikgKyAobWlucyA+IDAgfHwgaG91cnMgPT09IDAgPyBtaW5zICsgXCLQvNC40L0uXCIgOiBcIlwiKTtcbiAgICAgICAgcmV0dXJuIHsgaG91cnMsIG1pbnMsIHN0ciB9XG4gICAgfVxuXG4gICAgZ2V0T3JkZXJzVGltZSgpIHtcbiAgICAgICAgY29uc3QgdGltZSA9IHtcbiAgICAgICAgICAgIGhvdXJzOiAwLFxuICAgICAgICAgICAgbWludXRlczogMFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCByb3cgb2YgdGhpcy5yb3dzKSB7XG4gICAgICAgICAgICByb3cuaHRtbC50aW1lVmFsdWUuaW5uZXJUZXh0ID0gYCR7KHRpbWUuaG91cnMgPCAxMCA/IFwiMFwiIDogXCJcIikgKyB0aW1lLmhvdXJzfTokeyh0aW1lLm1pbnV0ZXMgPCAxMCA/IFwiMFwiIDogXCJcIikgKyB0aW1lLm1pbnV0ZXN9YDtcbiAgICAgICAgICAgIHRpbWUubWludXRlcyArPSBNYXRoLnJvdW5kKHJvdy52YWx1ZS5wcm9ncmFtLmR1cmF0aW9uIC8gNjAwMDApO1xuICAgICAgICAgICAgd2hpbGUgKHRpbWUubWludXRlcyA+IDU5KSB7XG4gICAgICAgICAgICAgICAgdGltZS5taW51dGVzIC09IDYwO1xuICAgICAgICAgICAgICAgIHRpbWUuaG91cnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJvd1RpbWVQbHVzKHJvdzogUm93LCBkdXJhdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHRpbWVBcnIgPSByb3cuaHRtbC50aW1lVmFsdWUuaW5uZXJUZXh0LnNwbGl0KFwiOlwiKTtcbiAgICAgICAgY29uc3QgdGltZSA9IHtcbiAgICAgICAgICAgIGhvdXJzOiArdGltZUFyclswXSxcbiAgICAgICAgICAgIG1pbnV0ZXM6ICt0aW1lQXJyWzFdXG4gICAgICAgIH07XG4gICAgICAgIHRpbWUubWludXRlcyArPSBNYXRoLnJvdW5kKGR1cmF0aW9uIC8gNjAwMDApO1xuICAgICAgICB3aGlsZSAodGltZS5taW51dGVzID4gNTkpIHtcbiAgICAgICAgICAgIHRpbWUubWludXRlcyAtPSA2MDtcbiAgICAgICAgICAgIHRpbWUuaG91cnMrKztcbiAgICAgICAgfVxuICAgICAgICByb3cuaHRtbC50aW1lVmFsdWUuaW5uZXJUZXh0ID0gYCR7KHRpbWUuaG91cnMgPCAxMCA/IFwiMFwiIDogXCJcIikgKyB0aW1lLmhvdXJzfTokeyh0aW1lLm1pbnV0ZXMgPCAxMCA/IFwiMFwiIDogXCJcIikgKyB0aW1lLm1pbnV0ZXN9YDtcbiAgICB9XG5cbiAgICByb3dUaW1lTWludXMocm93OiBSb3csIGR1cmF0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgdGltZUFyciA9IHJvdy5odG1sLnRpbWVWYWx1ZS5pbm5lclRleHQuc3BsaXQoXCI6XCIpO1xuICAgICAgICBjb25zdCB0aW1lID0ge1xuICAgICAgICAgICAgaG91cnM6ICt0aW1lQXJyWzBdLFxuICAgICAgICAgICAgbWludXRlczogK3RpbWVBcnJbMV1cbiAgICAgICAgfTtcbiAgICAgICAgdGltZS5taW51dGVzIC09IE1hdGgucm91bmQoZHVyYXRpb24gLyA2MDAwMCk7XG4gICAgICAgIHdoaWxlICh0aW1lLm1pbnV0ZXMgPCAwKSB7XG4gICAgICAgICAgICB0aW1lLm1pbnV0ZXMgKz0gNjA7XG4gICAgICAgICAgICB0aW1lLmhvdXJzLS07XG4gICAgICAgIH1cbiAgICAgICAgcm93Lmh0bWwudGltZVZhbHVlLmlubmVyVGV4dCA9IGAkeyh0aW1lLmhvdXJzIDwgMTAgPyBcIjBcIiA6IFwiXCIpICsgdGltZS5ob3Vyc306JHsodGltZS5taW51dGVzIDwgMTAgPyBcIjBcIiA6IFwiXCIpICsgdGltZS5taW51dGVzfWA7XG4gICAgfVxufVxuXG5uZXcgU2NoZWxkdWxlUGFnZSgpO1xuXG5jbGFzcyBTY2hlbGR1bGVJdGVtIHtcbiAgICBpZDogbnVtYmVyO1xuICAgIGRhdGU6IG51bWJlcjtcbiAgICBvcmRlcjogbnVtYmVyO1xuICAgIHByb2dyYW1faWQ6IG51bWJlcjtcbiAgICBwcm9ncmFtPzogUHJvZ3JhbTtcbn1cblxuY2xhc3MgUHJvZ3JhbSB7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZHVyYXRpb246IG51bWJlcjtcbiAgICBsaW5rOiBzdHJpbmc7XG59XG5cbmNsYXNzIFJvdyB7XG4gICAgaHRtbDoge1xuICAgICAgICByb290OiBIVE1MRWxlbWVudDtcbiAgICAgICAgdGltZVZhbHVlOiBIVE1MRWxlbWVudDtcbiAgICAgICAgcHJvZ3JhbU5hbWVDaGFuZ2VFbGVtOiBIVE1MRWxlbWVudDtcbiAgICAgICAgcHJvZ3JhbUR1cmF0aW9uVmFsdWU6IEhUTUxFbGVtZW50O1xuICAgICAgICBidG5PcmRlclBsdXM6IEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgICBidG5PcmRlck1pbnVzOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICAgICAgYnRuRGVsZXRlOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICB9O1xuICAgIHZhbHVlOiBTY2hlbGR1bGVJdGVtO1xufSJdLCJzb3VyY2VSb290IjoiIn0=