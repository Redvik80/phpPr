!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"d",(function(){return i})),n.d(e,"c",(function(){return o})),n.d(e,"e",(function(){return l})),n.d(e,"b",(function(){return s}));var r="http://1-5channel.tv",i="/files/images/";function o(t){return t.firstElementChild.innerHTML}function l(t,e){return t.firstElementChild.innerHTML=e}function s(t){new Quill(t,{theme:"snow",modules:{toolbar:[[{size:["small",!1,"large","huge"]}],["bold","italic","underline","strike"],[{script:"sub"},{script:"super"},{color:[]},"clean"]]}})}},,,function(t,e,n){t.exports=n.p+"scheldule.css"},,,function(t,e,n){"use strict";n.r(e);n(3);var r=function(){function t(t,e,n,r){var i=this;this.valuesList=e,this.currentValue=n,this.findField=r,this.html={},this.html.root=t,this.html.root.classList.add("input-find"),this.html.root.innerHTML="",this.html.input=document.createElement("input"),this.html.input.value=this.currentValue?this.currentValue[this.findField]:"",this.html.valuesContainer=document.createElement("div"),this.html.valuesContainer.classList.add("input-find__values-container"),this.html.input.addEventListener("input",this.displayFindRezults.bind(this));var o=function(t){i.html.root.contains(t.target)||(document.removeEventListener("mousedown",o),i.html.valuesContainer.classList.remove("_visible"),i.html.input.value=i.currentValue?i.currentValue[i.findField]:"")};this.html.input.addEventListener("focus",(function(){document.addEventListener("mousedown",o),i.displayFindRezults()})),this.html.valuesContainer.addEventListener("click",this.onSelectValue.bind(this,o)),this.html.root.appendChild(this.html.input),this.html.root.appendChild(this.html.valuesContainer)}return t.prototype.find=function(){var t=this,e=this.html.input.value.split(/[\s.,-]+/i).filter((function(t,e,n){return!(t.length<2||n.lastIndexOf(t)>e)}));if(0===e.length)return[];var n=this.valuesList.map((function(n,r){for(var i={value:n,wordsQuantity:0,arrIdx:r},o=0,l=e;o<l.length;o++){var s=l[o];new RegExp("^"+s+"[\\s.,-]+|[\\s.,-]+"+s+"[\\s.,-]+|[\\s.,-]+"+s+"$","i").test(n[t.findField])&&i.wordsQuantity++}return i})).filter((function(t){return t.wordsQuantity>0}));return n.sort((function(t,e){return e.wordsQuantity-t.wordsQuantity})),n},t.prototype.displayFindRezults=function(){this.html.valuesContainer.innerHTML="";for(var t=0,e=this.find();t<e.length;t++){var n=e[t],r=document.createElement("div");r.dataset.valueArrIdx=n.arrIdx+"",r.innerText=n.value[this.findField],r.classList.add("input-find__values-item"),this.html.valuesContainer.appendChild(r)}this.html.valuesContainer.classList.add("_visible"),this.html.valuesContainer.scrollTop=0},t.prototype.onSelectValue=function(t){document.removeEventListener("mousedown",t);var e=event.target;e.classList.contains("input-find__values-item")&&(this.currentValue=this.valuesList[+e.dataset.valueArrIdx],this.html.input.value=this.currentValue[this.findField],this.html.valuesContainer.classList.remove("_visible"),this.html.root.dispatchEvent(new CustomEvent("inputFindChange",{detail:{value:this.currentValue}})))},t}(),i=n(0);new(function(){function t(){this.programs=[],this.schelduleItems=[],this.rows=[];var t=document.getElementsByClassName("scheldule-crud-container")[0];this.html={root:t,addBtn:t.querySelector(".table__btn._add"),saveBtn:t.querySelector(".table__btn._save"),cancelBtn:t.querySelector(".table__btn._cancel"),dateInput:t.getElementsByClassName("date-input")[0],rowsContainer:t.getElementsByClassName("table__body")[0]},this.html.addBtn.addEventListener("click",this.onAddBtnClick.bind(this)),this.html.cancelBtn.addEventListener("click",this.onCancelBtnClick.bind(this)),this.html.saveBtn.addEventListener("click",this.onSaveBtnClick.bind(this)),this.html.dateInput.value=(new Date).getFullYear()+"-"+(new Date).getMonth()+"-"+(new Date).getDate(),this.html.dateInput.addEventListener("change",this.onDateChange.bind(this)),this.onDateChange()}return t.prototype.onDateChange=function(){var t=this;if(this.html.dateInput.value){var e=fetch(i.a+"/api/program/getAll.php").then((function(t){return t.json()})),n=fetch(i.a+"/api/scheldule/getAll.php?date="+ +new Date(this.html.dateInput.value)).then((function(t){return t.json()}));Promise.all([e,n]).then((function(e){t.programs=e[0],t.schelduleItems=e[1],t.html.rowsContainer.innerHTML="";for(var n=function(e){e.program=t.programs.find((function(t){return t.id===e.program_id})),t.addRow(e)},r=0,i=t.schelduleItems;r<i.length;r++){n(i[r])}t.setAllRowsTime()}))}},t.prototype.addRow=function(t){this.html.rowsContainer.insertAdjacentHTML("beforeend",'<div class="table__row" data-scheldule-id="'+t.id+'">\n                <div class="table__content-cells-container">\n                    <div class="table__cell _time">\n                        <div class="table__cell-value"></div>\n                    </div>\n                    <div class="table__cell _program-name">\n                        <div class="table__cell-change-elem"></div>\n                    </div>\n                    <div class="table__cell _program-duration">\n                        <div class="table__cell-value">\n                            '+(t.program?this.convertDuration(t.program.duration).str:"0мин.")+'\n                        </div>\n                    </div>\n                </div>\n                <div class="table__cell _btns">\n                    <button class="pi pi-arrow-up table__btn _order-minus"></button>\n                    <button class="pi pi-arrow-down table__btn _order-plus"></button>\n                    <button class="pi pi-trash table__btn _delete"></button>\n                </div>\n            </div>');var e=this.html.rowsContainer.lastElementChild,n={html:{root:e,timeValue:e.querySelector(".table__cell._time .table__cell-value"),programNameChangeElem:e.querySelector(".table__cell._program-name .table__cell-change-elem"),programDurationValue:e.querySelector(".table__cell._program-duration .table__cell-value"),btnOrderPlus:e.querySelector(".table__btn._order-plus"),btnOrderMinus:e.querySelector(".table__btn._order-minus"),btnDelete:e.querySelector(".table__btn._delete")},value:t};this.rows.push(n),new r(n.html.programNameChangeElem,this.programs,t.program,"name"),n.html.programNameChangeElem.addEventListener("inputFindChange",this.onSelectProgram.bind(this,n)),n.html.btnDelete.addEventListener("click",this.onDeleteBtnClick.bind(this,n)),n.html.btnOrderPlus.addEventListener("click",this.onOrderPlusBtnClick.bind(this,n)),n.html.btnOrderMinus.addEventListener("click",this.onOrderMinusBtnClick.bind(this,n))},t.prototype.onSaveBtnClick=function(){this.html.root.classList.remove("_changed")},t.prototype.onCancelBtnClick=function(){this.html.root.classList.remove("_changed")},t.prototype.onAddBtnClick=function(){this.html.root.classList.add("_changed");var t={date:+new Date(this.html.dateInput.value),order:this.rows.length+1,program_id:null,program:null,id:null};this.schelduleItems.push(t),this.addRow(t),this.setLastRowTime(),this.html.rowsContainer.scrollTop=this.html.rowsContainer.scrollHeight},t.prototype.onSelectProgram=function(t){this.html.root.classList.add("_changed");for(var e=event.detail.value,n=0,r=this.rows;n<r.length;n++){var i=r[n];i.value.order>t.value.order&&(t.value.program&&this.rowTimeMinus(i,t.value.program.duration),this.rowTimePlus(i,e.duration))}t.value.program=e,t.value.program_id=e.id,t.html.programDurationValue.innerText=this.convertDuration(e.duration).str},t.prototype.onOrderPlusBtnClick=function(t){var e=this.rows.findIndex((function(e){return e.value.id===t.value.id}));if(e<this.rows.length-2?t.html.root.parentElement.insertBefore(t.html.root,this.rows[e+2].html.root):e<this.rows.length-1&&t.html.root.parentElement.appendChild(t.html.root),e<this.rows.length-1){this.html.root.classList.add("_changed");var n=this.rows[e+1];this.rows[e+1]=t,this.rows[e]=n,t.value.order++,n.value.order--,n.value.program&&this.rowTimePlus(t,n.value.program.duration),t.value.program&&this.rowTimeMinus(n,t.value.program.duration)}},t.prototype.onOrderMinusBtnClick=function(t){var e=this.rows.findIndex((function(e){return e===t}));if(e>0){this.html.root.classList.add("_changed");var n=this.rows[e-1];t.html.root.parentElement.insertBefore(t.html.root,n.html.root),this.rows[e-1]=t,this.rows[e]=n,t.value.order--,n.value.order++,n.value.program&&this.rowTimeMinus(t,n.value.program.duration),t.value.program&&this.rowTimePlus(n,t.value.program.duration)}},t.prototype.onDeleteBtnClick=function(t){if(!t.value.program||confirm("Хорошо подумали?")){this.html.root.classList.add("_changed"),t.html.root.parentElement.removeChild(t.html.root),this.rows.splice(this.rows.findIndex((function(e){return e===t})),1);for(var e=0,n=this.rows;e<n.length;e++){var r=n[e];r.value.order>t.value.order&&(r.value.order--,t.value.program&&this.rowTimeMinus(r,t.value.program.duration))}}},t.prototype.convertDuration=function(t){var e=Math.floor(t/36e5),n=Math.floor((t-36e5*e)/6e4);return{hours:e,mins:n,str:(e>0?e+"ч. ":"")+(n>0||0===e?n+"мин.":"")}},t.prototype.setAllRowsTime=function(){for(var t={hours:0,minutes:0},e=0,n=this.rows;e<n.length;e++){var r=n[e];for(r.html.timeValue.innerText=(t.hours<10?"0":"")+t.hours+":"+(t.minutes<10?"0":"")+t.minutes,t.minutes+=Math.round(r.value.program.duration/6e4);t.minutes>59;)t.minutes-=60,t.hours++}},t.prototype.setLastRowTime=function(){var t=this.rows[this.rows.length-2],e=t.html.timeValue.innerText.split(":"),n={hours:+e[0],minutes:+e[1]};for(n.minutes+=Math.round((t.value.program?t.value.program.duration:0)/6e4);n.minutes>59;)n.minutes-=60,n.hours++;this.rows[this.rows.length-1].html.timeValue.innerText=(n.hours<10?"0":"")+n.hours+":"+(n.minutes<10?"0":"")+n.minutes},t.prototype.rowTimePlus=function(t,e){var n=t.html.timeValue.innerText.split(":"),r={hours:+n[0],minutes:+n[1]};for(r.minutes+=Math.round(e/6e4);r.minutes>59;)r.minutes-=60,r.hours++;t.html.timeValue.innerText=(r.hours<10?"0":"")+r.hours+":"+(r.minutes<10?"0":"")+r.minutes},t.prototype.rowTimeMinus=function(t,e){var n=t.html.timeValue.innerText.split(":"),r={hours:+n[0],minutes:+n[1]};for(r.minutes-=Math.round(e/6e4);r.minutes<0;)r.minutes+=60,r.hours--;t.html.timeValue.innerText=(r.hours<10?"0":"")+r.hours+":"+(r.minutes<10?"0":"")+r.minutes},t}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,