!function(e){var n={};function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(r,a,function(n){return e[n]}.bind(null,a));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=9)}({10:function(e,n,t){e.exports=t.p+"admin/programs.css"},11:function(e,n){var t=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(a,l){function i(e){try{o(r.next(e))}catch(e){l(e)}}function c(e){try{o(r.throw(e))}catch(e){l(e)}}function o(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,c)}o((r=r.apply(e,n||[])).next())}))},r=this&&this.__generator||function(e,n){var t,r,a,l,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return l={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function c(l){return function(c){return function(l){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,r&&(a=2&l[0]?r.return:l[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,l[1])).done)return a;switch(r=0,a&&(l=[2&l[0],a.value]),l[0]){case 0:case 1:a=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===l[0]||2===l[0])){i=0;continue}if(3===l[0]&&(!a||l[1]>a[0]&&l[1]<a[3])){i.label=l[1];break}if(6===l[0]&&i.label<a[1]){i.label=a[1],a=l;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(l);break}a[2]&&i.ops.pop(),i.trys.pop();continue}l=n.call(e,i)}catch(e){l=[6,e],r=0}finally{t=a=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,c])}}},a=document.getElementsByClassName("programs-crud-component")[0],l=a.querySelector(".table__btn._add"),i=a.getElementsByClassName("table__body")[0],c=i.getElementsByClassName("table__row"),o=[];function u(e){return{id:e.querySelector(".table__cell._id .table__cell-value"),nameValue:e.querySelector(".table__cell._name .table__cell-value"),nameChangeElem:e.querySelector(".table__cell._name .table__cell-change-elem"),durationValue:e.querySelector(".table__cell._duration .table__cell-value"),durationChangeElemHours:e.querySelector(".table__cell._duration .table__cell-change-elem._hours"),durationChangeElemMins:e.querySelector(".table__cell._duration .table__cell-change-elem._mins"),btnChange:e.querySelector(".table__btn._change"),btnDelete:e.querySelector(".table__btn._delete"),btnSave:e.querySelector(".table__btn._save"),btnCancel:e.querySelector(".table__btn._cancel")}}function s(e){return e.parentElement.parentElement}function d(e){var n=u(e);n.btnChange.addEventListener("click",f),n.btnCancel.addEventListener("click",m),n.btnDelete.addEventListener("click",v),n.btnSave.addEventListener("click",h)}function _(e){var n=Math.floor(e/36e5),t=Math.floor((e-36e5*n)/6e4);return{hours:n,mins:t,str:(n>0?n+"ч. ":"")+(t>0||0===n?t+"мин.":"")}}function b(e){var n=_(e.duration);return'<div class="table__row">\n        <div class="table__content-cells-container">\n            <div class="table__cell _id">\n                <div class="table__cell-value">'+(e.id||"")+'</div>\n            </div>\n            <div class="table__cell _name">\n                <div class="table__cell-value">'+e.name+'</div>\n                <input class="table__cell-change-elem" maxlength="200" name="name" value="'+e.name+'">\n            </div>\n            <div class="table__cell _duration">\n                <div class="table__cell-value">'+n.str+'</div>\n                <div class="table__cell-change-elem-container">\n                    <input class="table__cell-change-elem _hours" type="number" min="0" max="24" value="'+n.hours+'">ч.\n                    <input class="table__cell-change-elem _mins" type="number" min="0" max="59" value="'+n.mins+'">мин.\n                </div>\n            </div>\n        </div>\n        <div class="table__cell _btns">\n            <button class="pi pi-pencil table__btn _change"></button>\n            <button class="pi pi-trash table__btn _delete"></button>\n            <button class="pi pi-save table__btn _save"></button>\n            <button class="pi pi-times table__btn _cancel"></button>\n        </div>\n    </div>'}function f(e){s(e.currentTarget).classList.add("_changed")}function m(e){var n=s(e.currentTarget),t=u(n);if(t.id.innerText){n.classList.remove("_changed");var r=o.find((function(e){return e.id+""===t.id.innerText})),a=_(r.duration);t.nameChangeElem.value=r.name,t.durationChangeElemHours.value=a.hours+"",t.durationChangeElemMins.value=a.mins+""}else n.parentElement.removeChild(n)}function v(e){return t(this,void 0,void 0,(function(){var n,t;return r(this,(function(r){switch(r.label){case 0:return confirm("Хорошо подумали?")?(n=s(e.currentTarget),t=u(n),[4,fetch("/api/program/delete.php?id="+t.id.innerText,{method:"delete"})]):[2];case 1:return r.sent(),o=o.filter((function(e){return e.id+""!==t.id.innerText})),n.parentElement.removeChild(n),[2]}}))}))}function h(e){return t(this,void 0,void 0,(function(){var n,t,a,l,i,c,d;return r(this,(function(r){switch(r.label){case 0:return n=s(e.currentTarget),t=u(n),a=36e5*+t.durationChangeElemHours.value+6e4*+t.durationChangeElemMins.value,t.id.innerText?(l={id:+t.id.innerText,name:t.nameChangeElem.value,duration:a},[4,fetch("/api/program/change.php",{method:"put",body:JSON.stringify(l)})]):[3,2];case 1:return r.sent(),o=o.map((function(e){return e.id===l.id?l:e})),[3,5];case 2:return i={id:null,name:t.nameChangeElem.value,duration:a},c=i,[4,fetch("/api/program/add.php",{method:"post",body:JSON.stringify(i)})];case 3:return[4,r.sent().json()];case 4:c.id=r.sent(),t.id.innerText=""+i.id,o.push(i),r.label=5;case 5:return d=_(a),t.nameValue.innerText=t.nameChangeElem.value,t.durationValue.innerText=d.str,n.classList.remove("_changed"),[2]}}))}))}l.addEventListener("click",(function(){i.insertAdjacentHTML("beforeend",b({id:null,name:"",duration:36e5}));var e=i.lastElementChild;d(e),u(e).btnChange.click(),setTimeout((function(){return i.scrollTop=i.scrollHeight}))})),fetch("/api/program/getAll.php").then((function(e){return e.json()})).then((function(e){for(var n=0,t=o=e;n<t.length;n++){var r=t[n];i.insertAdjacentHTML("beforeend",b(r))}for(var a=0;a<c.length;a++)d(c[a])}))},9:function(e,n,t){"use strict";t.r(n);t(10),t(11)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,