!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}({10:function(e,t,n){"use strict";n.r(t);n(6);var a=function(e,t,n,a){return new(n||(n=Promise))((function(r,l){function i(e){try{o(a.next(e))}catch(e){l(e)}}function s(e){try{o(a.throw(e))}catch(e){l(e)}}function o(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}o((a=a.apply(e,t||[])).next())}))},r=function(e,t){var n,a,r,l,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return l={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(l[Symbol.iterator]=function(){return this}),l;function s(l){return function(s){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,a&&(r=2&l[0]?a.return:l[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,l[1])).done)return r;switch(a=0,r&&(l=[2&l[0],r.value]),l[0]){case 0:case 1:r=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,a=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!(r=(r=i.trys).length>0&&r[r.length-1])&&(6===l[0]||2===l[0])){i=0;continue}if(3===l[0]&&(!r||l[1]>r[0]&&l[1]<r[3])){i.label=l[1];break}if(6===l[0]&&i.label<r[1]){i.label=r[1],r=l;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(l);break}r[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],a=0}finally{n=r=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,s])}}},l=document.getElementsByClassName("programs-ad-crud-table")[0],i=document.getElementsByClassName("items")[0],s=i.getElementsByTagName("tr");l.querySelector(".buttons-container .add").addEventListener("click",(function(){i.insertAdjacentHTML("afterbegin",'\n        <tr>\n            <td class="id-cell"></td>\n            <td colspan="2">\n                <span class="name-text"></span>\n                <input class="name-input" maxlength="200">\n            </td>\n            <td class="year-cell">\n                <span class="year-text"></span>\n                <input class="year-input" type="number">\n            </td>\n            <td class="buttons-container">\n                <button class="pi pi-pencil change"></button>\n                <button class="pi pi-trash delete"></button>\n                <button class="pi pi-save save"></button>\n                <button class="pi pi-times cancel"></button>\n            </td>\n        </tr>\n    ');var e=i.firstElementChild;c(e),e.getElementsByClassName("change")[0].click()}));for(var o=0;o<s.length;o++)c(s[o]);function c(e){e.getElementsByClassName("change")[0].addEventListener("click",p),e.getElementsByClassName("cancel")[0].addEventListener("click",d),e.getElementsByClassName("save")[0].addEventListener("click",u)}function u(e){return a(this,void 0,void 0,(function(){var t,n,a;return r(this,(function(r){switch(r.label){case 0:return t=m(e.currentTarget),(n=function(e){var t={id:null,name:e.getElementsByClassName("name-input")[0].value,description:e.nextElementSibling.getElementsByClassName("description-textarea")[0].value,year:+e.getElementsByClassName("year-input")[0].value,img_file_name:null,new_img_file:(a=e.nextElementSibling.getElementsByClassName("input-img")[0],a.dataset.value||null)},n=e.dataset.oldData;var a;n&&(n=JSON.parse(n),t.id=n.id,t.img_file_name=n.img_file_name);return t}(t)).id?[4,fetch("/api/programAd/change.php",{method:"post",body:JSON.stringify(n)})]:[3,2];case 1:return r.sent(),[3,5];case 2:return a=n,[4,fetch("/api/programAd/add.php",{method:"post",body:JSON.stringify(n)})];case 3:return[4,r.sent().json()];case 4:a.id=r.sent(),r.label=5;case 5:return function(e,t){e.dataset.oldData=JSON.stringify(t),e.getElementsByClassName("id-cell")[0].innerText=""+t.id,e.getElementsByClassName("name-text")[0].innerText=t.name,e.getElementsByClassName("year-text")[0].innerText=t.year+"",f(e)}(t,n),t.classList.remove("changed"),[2]}}))}))}function d(e){var t=m(e.currentTarget);t.dataset.oldData?(t.classList.remove("changed"),f(t)):(t.parentElement.removeChild(t.nextElementSibling),t.parentElement.removeChild(t))}function p(e){var t=m(e.currentTarget);t.classList.add("changed"),t.insertAdjacentHTML("afterend",'\n            <tr class="change-row">\n                <td colspan="2">\n                    <div class="cell-title">Описание</div>\n                    <textarea class="description-textarea" maxlength="2000"></textarea>\n                </td>\n                <td colspan="2">\n                    <div class="cell-title">Изображение</div>\n                    <div class="input-img"></div>\n                </td>\n                <td class="buttons-container">\n                    <button class="pi pi-arrow-up order-plus"></button>\n                    <button class="pi pi-arrow-down order-minus"></button>\n                </td>\n            </tr>\n    '),function(e){e.innerHTML="",e.insertAdjacentHTML("afterbegin",'\n        <img src="/files/images/noImage.png">\n        <label class="button">\n            <span>Выбрать изображение</span>\n            <input type="file">\n        </label>\n    '),e.classList.add("input-img");var t=e.getElementsByTagName("img")[0],n=e.getElementsByTagName("input")[0];n.addEventListener("change",(function(a){var r=a.target.files;if("image/jpeg"!==r[0].type&&"image/png"!==r[0].type)return alert("Error. Invalid file type. Valid only 'image/jpeg' and 'image/png'.");var l=new FileReader;l.addEventListener("load",(function(a){t.src=a.target.result,e.dataset.newValue=a.target.result,n.value=null})),l.readAsDataURL(r[0])}))}(t.nextElementSibling.getElementsByClassName("input-img")[0])}function m(e){return e.parentElement.parentElement}function f(e){var t=JSON.parse(e.dataset.oldData);e.getElementsByClassName("name-input")[0].value=t.name,e.getElementsByClassName("year-input")[0].value=t.year+""}},6:function(e,t,n){e.exports=n.p+"admin/home.css"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,